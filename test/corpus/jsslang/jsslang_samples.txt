================================================================================
Css
================================================================================
@charset "utf-8";
.className p:hover[type=intpu]{
  font-size: 10px;
}

div a {
  display: block;
}
--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (charset_statement
      (string
        (string_fragment))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral)
            (cssLiteral))
          (pseudo)
          (pseudo
            (cssLiteral))
          (attrib)
          (attribute_name
            (cssLiteral))
          (attrib)
          (attrib
            (plain_value
              (cssLiteral)))
          (attrib)))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral)))))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (elementName
            (cssLiteral)
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))))))

================================================================================
Variables
================================================================================
const selector = "p div"; 
let color = '#fff';

${selector}:hover {
  color: ${color};
  [this.name]: ${color};
  ${this.name}: ${color};
  ${this.name}_test: ${color};
  test_${this.name}: ${color};
}

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (string
        (string_fragment))))
  (lexical_declaration
    (variable_declarator
      (identifier)
      (string
        (string_fragment))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (elementName
            (template_substitution
              (identifier)))
          (pseudo)
          (pseudo
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (template_substitution
                (identifier)))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (computed_property_name
                (member_expression
                  (this)
                  (property_identifier))))
            (jssPropertyValue
              (template_substitution
                (identifier)))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (template_substitution
                (member_expression
                  (this)
                  (property_identifier))))
            (jssPropertyValue
              (template_substitution
                (identifier)))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (template_substitution
                (member_expression
                  (this)
                  (property_identifier)))
              (cssLiteral))
            (jssPropertyValue
              (template_substitution
                (identifier)))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (template_substitution
                (member_expression
                  (this)
                  (property_identifier))))
            (jssPropertyValue
              (template_substitution
                (identifier)))))))))

================================================================================
Imports
================================================================================
@import 'style.css';
import _ from 'lodash';
import { clone } from 'lodash/cone';

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (css_import_statement
      (string
        (string_fragment))))
  (import_statement
    (import_clause
      (identifier))
    (string
      (string_fragment)))
  (import_statement
    (import_clause
      (named_imports
        (import_specifier
          (identifier))))
    (string
      (string_fragment))))

================================================================================
Nesting
================================================================================
.className {
  color: #fff;
  ${this.name}--inner p:hover {
    -moz-color: #fff;
  }
}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))
        (rule_set
          (selectors
            (simpleSelector
              (elementName
                (template_substitution
                  (member_expression
                    (this)
                    (property_identifier)))
                (cssLiteral)
                (cssLiteral))
              (pseudo)
              (pseudo
                (cssLiteral))))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral)
                  (cssLiteral))
                (jssPropertyValue
                  (cssLiteral))))))))))

================================================================================
Literals
================================================================================
.className {
  color: #fff;
  -moz-color: #fff;
  --moz-color: #fff;
  --moz_color: #fff;
}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))))))

================================================================================
Jss Block Variables
================================================================================
const hidden = @block { display: none; };

.className {
    font-size: 10px;
    ...hidden;
}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (jssVariableStatement
      (identifier)
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral)))))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral))))
        (jssDeclaration
          (jssSpreadDefinition
            (identifier)))))))

================================================================================
Jss Block Variables with nested blocks
================================================================================
const clearfix = @block {
    display: block;
    name: ${this.name};
    ${this.name}:after {
        content: ".";
        display: table;
        clear: both;
    }
};
.className {
    font-size: 10px;
    ...clearfix;
}
.className2 {
    font-size: 11px;
    ...clearfix;
}
--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (jssVariableStatement
      (identifier)
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (template_substitution
                (member_expression
                  (this)
                  (property_identifier))))))
        (rule_set
          (selectors
            (simpleSelector
              (elementName
                (template_substitution
                  (member_expression
                    (this)
                    (property_identifier))))
              (pseudo)
              (pseudo
                (cssLiteral))))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (string
                    (string_fragment)))))
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (cssLiteral))))
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (cssLiteral)))))))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral))))
        (jssDeclaration
          (jssSpreadDefinition
            (identifier))))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral))))
        (jssDeclaration
          (jssSpreadDefinition
            (identifier)))))))

================================================================================
Media Queries
================================================================================
.component {
    width: 300px;
}

@media (min-width: 768px) {
    .component {
        width: 600px;
    }

    @media (min-resolution: 192dpi) {
        .component {
            background-image: url(/img/retina2x.png);
        }
    }
}

@media (min-width: 1280px) {
    .component {
        width: 800px;
    }
}
--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral)))))))
  (stylesheetItem
    (media_statement
      (feature_query
        (feature_name
          (cssLiteral))
        (integer_value)
        (plain_value
          (cssLiteral)))
      (block
        (rule_set
          (selectors
            (simpleSelector
              (cssClass)
              (cssClass
                (cssLiteral))))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (number)
                  (cssLiteral))))))
        (media_statement
          (feature_query
            (feature_name
              (cssLiteral))
            (integer_value)
            (plain_value
              (cssLiteral)))
          (block
            (rule_set
              (selectors
                (simpleSelector
                  (cssClass)
                  (cssClass
                    (cssLiteral))))
              (block
                (jssDeclaration
                  (jssPropertyDefinition
                    (jssPropertyName
                      (cssLiteral)
                      (cssLiteral))
                    (jssPropertyValue
                      (cssLiteral)
                      (parenthesized_value
                        (plain_value))))))))))))
  (stylesheetItem
    (media_statement
      (feature_query
        (feature_name
          (cssLiteral))
        (integer_value)
        (plain_value
          (cssLiteral)))
      (block
        (rule_set
          (selectors
            (simpleSelector
              (cssClass)
              (cssClass
                (cssLiteral))))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (number)
                  (cssLiteral))))))))))

================================================================================
Media Queries nested
================================================================================
.component {
  width: 300px;
  @media (min-width: 768px) {
    width: 600px;
    @media (min-resolution: 192dpi) {
      background-image: url(/img/retina2x.png);
    }
  }
  @media (min-width: 1280px) {
    width: 800px;
  }
}
--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral))))
        (media_statement
          (feature_query
            (feature_name
              (cssLiteral))
            (integer_value)
            (plain_value
              (cssLiteral)))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (number)
                  (cssLiteral))))
            (media_statement
              (feature_query
                (feature_name
                  (cssLiteral))
                (integer_value)
                (plain_value
                  (cssLiteral)))
              (block
                (jssDeclaration
                  (jssPropertyDefinition
                    (jssPropertyName
                      (cssLiteral)
                      (cssLiteral))
                    (jssPropertyValue
                      (cssLiteral)
                      (parenthesized_value
                        (plain_value)))))))))
        (media_statement
          (feature_query
            (feature_name
              (cssLiteral))
            (integer_value)
            (plain_value
              (cssLiteral)))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (number)
                  (cssLiteral))))))))))

================================================================================
Scoped variables
================================================================================
.className {
  const size = new Px(10);
  const block = @block {
      display: block;
  };
  color: #fff;
  size: ${size};
  ...block;
}
--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (lexical_declaration
          (variable_declarator
            (identifier)
            (new_expression
              (identifier)
              (arguments
                (number)))))
        (jssVariableStatement
          (identifier)
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (cssLiteral))))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (template_substitution
                (identifier)))))
        (jssDeclaration
          (jssSpreadDefinition
            (identifier)))))))

================================================================================
At Rules
================================================================================
@font-face {
  font-family: "Open Sans";
  src: url("/a") format("woff2"), url("/b/c") format("woff");
}
.className {
    width: 100px;
    const value = '#fff';
    @media screen {
        width: 200px;
            @media print {
                width: ${Dimentions.fromString(this.parent.styles.width).add(100)};
                color: ${value};
        }
    }
}
--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (at_rule
      (cssLiteral)
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral)
              (cssLiteral))
            (jssPropertyValue
              (string
                (string_fragment)))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (cssLiteral)
              (jssPropertyValue
                (string
                  (string_fragment)))
              (cssLiteral)
              (jssPropertyValue
                (string
                  (string_fragment)))
              (cssLiteral)
              (jssPropertyValue
                (string
                  (string_fragment)))
              (cssLiteral)
              (jssPropertyValue
                (string
                  (string_fragment)))))))))
  (stylesheetItem
    (rule_set
      (selectors
        (simpleSelector
          (cssClass)
          (cssClass
            (cssLiteral))))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral))
            (jssPropertyValue
              (number)
              (cssLiteral))))
        (lexical_declaration
          (variable_declarator
            (identifier)
            (string
              (string_fragment))))
        (media_statement
          (keyword_query
            (cssLiteral))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral))
                (jssPropertyValue
                  (number)
                  (cssLiteral))))
            (media_statement
              (keyword_query
                (cssLiteral))
              (block
                (jssDeclaration
                  (jssPropertyDefinition
                    (jssPropertyName
                      (cssLiteral))
                    (jssPropertyValue
                      (template_substitution
                        (call_expression
                          (member_expression
                            (call_expression
                              (member_expression
                                (identifier)
                                (property_identifier))
                              (arguments
                                (member_expression
                                  (member_expression
                                    (member_expression
                                      (this)
                                      (property_identifier))
                                    (property_identifier))
                                  (property_identifier))))
                            (property_identifier))
                          (arguments
                            (number)))))))
                (jssDeclaration
                  (jssPropertyDefinition
                    (jssPropertyName
                      (cssLiteral))
                    (jssPropertyValue
                      (template_substitution
                        (identifier)))))))))))))

================================================================================
Comments
================================================================================
// one line comment
/*
 a multi-line comment
*/
// <!-- a html style comment --> html style comment has to be defined in scanner.c
--------------------------------------------------------------------------------

(program
  (comment)
  (comment)
  (comment))
