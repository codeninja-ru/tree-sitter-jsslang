================================================================================
Import statements
================================================================================

@import url("fineprint.css") print;
@import url("bluish.css") speech;
@import 'custom.css';
@import url("chrome://communicator/skin/");
@import "common.css" screen;

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (css_import_statement
      (uri)
      (query_list
        (media_query
          (media_type
            (identifier))))))
  (stylesheetItem
    (css_import_statement
      (uri)
      (query_list
        (media_query
          (media_type
            (identifier))))))
  (stylesheetItem
    (css_import_statement
      (string
        (string_fragment))))
  (stylesheetItem
    (css_import_statement
      (uri)))
  (stylesheetItem
    (css_import_statement
      (string
        (string_fragment))
      (query_list
        (media_query
          (media_type
            (identifier)))))))

================================================================================
Namespace statements
================================================================================

/* Default namespace */
@namespace url(XML-namespace-URL);
@namespace "XML-namespace-URL";
@namespace url(http://www.w3.org/1999/xhtml);
@namespace svg url(http://www.w3.org/2000/svg);

/* Prefixed namespace */
@namespace prefix url(XML-namespace-URL);
@namespace prefix "XML-namespace-URL";

--------------------------------------------------------------------------------

(program
  (comment)
  (stylesheetItem
    (namespace_statement
      (uri)))
  (stylesheetItem
    (namespace_statement
      (string
        (string_fragment))))
  (stylesheetItem
    (namespace_statement
      (uri)))
  (stylesheetItem
    (namespace_statement
      (namespace_name
        (cssLiteral
          (identifier)))
      (uri)))
  (comment)
  (stylesheetItem
    (namespace_statement
      (namespace_name
        (cssLiteral
          (identifier)))
      (uri)))
  (stylesheetItem
    (namespace_statement
      (namespace_name
        (cssLiteral
          (identifier)))
      (string
        (string_fragment)))))

================================================================================
Keyframes statements
================================================================================

@keyframes important1 {
  from { margin-top: 50px; }
  50%  { margin-top: 150px !important; } /* ignored */
  to   { margin-top: 100px; }
}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (keyframes_statement
      (keyframes_name
        (cssLiteral
          (identifier)))
      (keyframe_block_list
        (keyframe_block
          (from)
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral
                    (identifier))
                  (cssLiteral
                    (identifier)))
                (jssPropertyValue
                  (number)
                  (cssLiteral
                    (identifier)))))))
        (keyframe_block
          (integer_value
            (unit))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral
                    (identifier))
                  (cssLiteral
                    (identifier)))
                (jssPropertyValue
                  (number)
                  (cssLiteral
                    (identifier))
                  (cssLiteral
                    (identifier)))))))
        (comment)
        (keyframe_block
          (to)
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral
                    (identifier))
                  (cssLiteral
                    (identifier)))
                (jssPropertyValue
                  (number)
                  (cssLiteral
                    (identifier)))))))))))

================================================================================
Media statements
================================================================================

@media screen and (min-width: 30em) and (orientation: landscape) {}
@media (min-height: 680px), screen and (orientation: portrait) {}
@media not all and (monochrome) {}
@media only screen {}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (media_statement
      (media_query_list
        (media_query
          (media_type
            (identifier))
          (jss_expression
            (media_feature
              (identifier)
              (identifier))
            (expr
              (term
                (integer_value
                  (unit)))))
          (jss_expression
            (media_feature
              (identifier))
            (expr
              (term
                (cssLiteral
                  (identifier)))))))
      (block)))
  (stylesheetItem
    (media_statement
      (media_query_list
        (media_query
          (jss_expression
            (media_feature
              (identifier)
              (identifier))
            (expr
              (term
                (integer_value
                  (unit))))))
        (media_query
          (media_type
            (identifier))
          (jss_expression
            (media_feature
              (identifier))
            (expr
              (term
                (cssLiteral
                  (identifier)))))))
      (block)))
  (stylesheetItem
    (media_statement
      (media_query_list
        (media_query
          (media_type
            (identifier))
          (jss_expression
            (media_feature
              (identifier)))))
      (block)))
  (stylesheetItem
    (media_statement
      (media_query_list
        (media_query
          (media_type
            (identifier))))
      (block))))

================================================================================
Supports statements
================================================================================

@supports (animation-name: test) {
  div { animation-name: test; }
}
@supports (transform-style: preserve) or (-moz-transform-style: preserve) {}
@supports not ((text-align-last: justify) or (-moz-text-align-last: justify)) {}
@supports not selector(:matches(a, b)) {}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (supports_statement
      (supports_condition
        (supports_in_parens
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral
                (identifier))
              (cssLiteral
                (identifier)))
            (jssPropertyValue
              (cssLiteral
                (identifier))))))
      (block
        (rule_set
          (selectors
            (simpleSelector
              (elementName
                (cssLiteral
                  (identifier)))))
          (block
            (jssDeclaration
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral
                    (identifier))
                  (cssLiteral
                    (identifier)))
                (jssPropertyValue
                  (cssLiteral
                    (identifier))))))))))
  (stylesheetItem
    (supports_statement
      (supports_condition
        (supports_in_parens
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral
                (identifier))
              (cssLiteral
                (identifier)))
            (jssPropertyValue
              (cssLiteral
                (identifier)))))
        (supports_in_parens
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral
                (identifier)
                (identifier))
              (cssLiteral
                (identifier)))
            (jssPropertyValue
              (cssLiteral
                (identifier))))))
      (block)))
  (stylesheetItem
    (supports_statement
      (supports_condition
        (supports_in_parens
          (supports_condition
            (supports_in_parens
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral
                    (identifier)
                    (identifier))
                  (cssLiteral
                    (identifier)))
                (jssPropertyValue
                  (cssLiteral
                    (identifier)))))
            (supports_in_parens
              (jssPropertyDefinition
                (jssPropertyName
                  (cssLiteral
                    (identifier)
                    (identifier)
                    (identifier))
                  (cssLiteral
                    (identifier)))
                (jssPropertyValue
                  (cssLiteral
                    (identifier))))))))
      (block)))
  (stylesheetItem
    (supports_statement
      (supports_condition
        (supports_in_parens
          (general_enclosed
            (identifier))
          (general_enclosed)
          (general_enclosed
            (cssLiteral
              (identifier))
            (any_value
              (cssLiteral
                (identifier))
              (cssLiteral
                (identifier))))
          (general_enclosed)))
      (block))))

================================================================================
Charset statements
================================================================================

@charset "utf-8";

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (charset_statement
      (string
        (string_fragment)))))

================================================================================
Other at-statements
================================================================================

@font-face {
  font-family: "Open Sans";
  src: url("/a") format("woff2"), url("/b/c") format("woff");
}

--------------------------------------------------------------------------------

(program
  (stylesheetItem
    (at_rule
      (cssLiteral
        (identifier)
        (identifier))
      (block
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral
                (identifier))
              (cssLiteral
                (identifier)))
            (jssPropertyValue
              (string
                (string_fragment)))))
        (jssDeclaration
          (jssPropertyDefinition
            (jssPropertyName
              (cssLiteral
                (identifier)))
            (jssPropertyValue
              (uri)
              (cssLiteral
                (identifier))
              (jssPropertyValue
                (string
                  (string_fragment)))
              (uri)
              (cssLiteral
                (identifier))
              (jssPropertyValue
                (string
                  (string_fragment))))))))))
